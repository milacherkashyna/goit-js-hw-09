{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAiCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAzCSQ,SAASC,cAAc,SAC/BC,iBAAiB,UACzB,SAAsBC,GAEpB,GADAA,EAAMC,iBAEkC,KAAtCD,EAAME,OAAOC,SAASd,MAAMe,OACS,KAArCJ,EAAME,OAAOC,SAASE,KAAKD,OACY,KAAvCJ,EAAME,OAAOC,SAASG,OAAOF,MAG7B,YADAG,EAAAtB,GAASuB,OAAOC,QAAQ,0BAG1B,IAAMH,GAAUN,EAAME,OAAOC,SAASG,OAAOF,MACzCM,GAASV,EAAME,OAAOC,SAASd,MAAMe,MACnCC,GAAQL,EAAME,OAAOC,SAASE,KAAKD,MACzCJ,EAAME,OAAOS,QACb,IAAK,IAAIC,EAAQ,EAAGA,GAASN,EAAQM,IACnCzB,EAAcyB,EAAOF,GAClBG,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBkB,EAAAtB,GAASuB,OAAOO,QACd,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGjD4B,OAAM,SAAAH,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBkB,EAAAtB,GAASuB,OAAOC,QACd,sBAAqCO,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGjDqB,GAASL,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', onFormSubmit);\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  if (\n    event.target.elements.delay.value === '' ||\n    event.target.elements.step.value === '' ||\n    event.target.elements.amount.value === ''\n  ) {\n    Notiflix.Notify.failure('Please fill all fields');\n    return;\n  }\n  const amount = +event.target.elements.amount.value;\n  let delay = +event.target.elements.delay.value;\n  const step = +event.target.elements.step.value;\n  event.target.reset();\n  for (let index = 1; index <= amount; index++) {\n    createPromise(index, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","target","elements","value","step","amount","$parcel$interopDefault","Notify","failure","delay1","reset","index","then","param","success","concat","catch"],"version":3,"file":"03-promises.a7d0dc75.js.map"}